# coding=utf-8
# 字符串高级用法

# 1、转义
# 在字符串中可以使用反斜线进行转义： \\
# \b 退格
# \n 换行
# \r 回车
# \t 制表符
# \" 双引号
# \' 单引号
# \\ 反斜线
super_s_1 = 'hello\n world\" \''
print(super_s_1)

super_s_2 = '商品名\t\t单价\t\t数量\t\t总价'
super_s_3 = '小狗\t\t 100\t\t2\t\t 216'
print(super_s_2)
print(super_s_3)

# 2、字符串格式化
# Python 提供 了“%”对各 种 类型 的数据进行格式化输出，
price = 108
print('商品的价格为：%s' % price)

# 这行代码中的 print 函数包含三个部分，
# 第一部分是格式化字符串(它相当于字符串模板)，该格式化字符串中包含一个“ %s”占位符它会被第三部分的变量或表达式的值代替;
# 第二部分固定使用“%”作为分隔符。相当于是一个转换说明符、占位符。“%s'’指定将变量或值使用 str()函数转换为字符串。
# 第三部分是一个或者多个变量 并且使 用圆括号将这些变量括起来。

num = 10
print('商品的价格为：%s,购买了%s件' % (price, num))


# 除了%s，还有更多的转换说明符
# d,i  => 转换为带符号的十进制形式的整数
# o    => 转换为带符号的八进制形式的整数
# x,X  => 转换为带符号的十六进制形式的整数
# e,E  => 转换为科学计数法表示的
# f,F  => 转换为十进制表示的浮点数
# g,G  => 只能选择f或者e
# r    => 使用 repr()将变业或表达式转换为字符串
# s    => 使用 str()将变业或表达式转换为字符串

# 当使用上面的转换说明符时可指定转换后的最小宽度

num_1 = 20
print('num = %6s' % num_1)
print('num = %6d' % num_1)
print('num = %6i' % num_1)
print('num = %6x' % num_1)
print('num = %6e' % num_1)
print('num = %6f' % num_1)
print('num = %6g' % num_1)
print('num = %6r' % num_1)
print('num = %6s' % num_1)

# 在默认情况下， 转换出来的字符串总是右对齐的， 不够宽度时左边补充空格。
# python允许在最小宽度之前添加一个标志来改变这种行为
# ① - : 指定左对齐。
# ② + : 表示数值总要带着符号(正数带"+" ，负 数带"-")。
# ③ 0 : 表示不补充空格， 而是补充0
# 三个标记可以同时存在。

print('\n')
print('num =%06d' % num_1) # 补零
print('num =%+6d' % num_1) # 有符号
print('num =%-6d' % num_1) # 左对齐

# 对于转换浮点数， Python还允许指定小数点后的数字位数
# 如果转换的是字符串， Python允许指定转换后的字符串的最大字符数 。
# 这个标志被称为精度值，该精度值被放在最小宽度之后，中 间用点(.)隔开

num_2 = 3.1415898989
# 最小宽度为 8，小数点后保留 3 位
print('float = %08.6f' % num_2)
# 最小宽度为 8，小数点后保留 2 位，带符号，补零
print('float = %+08.2f' % num_2)









