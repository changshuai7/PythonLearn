# coding=utf-8

# python 内置的三种常用数据结构 : 列表 list、元组 tuple 和字典 diet, 这三种数据结构一但都可用于保存多个数据项
# 列表和元祖相似。都是有序的，都是可以通过index访问的。但元组是不可修改的，但列表是可修改的
# 字典是key - value 形式保存数据的。


"""
一、序列简介
常见序列主要包括：
1、字符串
2、列表
3、元祖

"""
# 字符串
#       ====>   其实就是一种常见的序列，通过索引访问字符串内的字符程序就是序列的示范程序。
# 序列、元祖
#       ====>   元组是不可变的，元组一旦构建出来，程序就不能修改元组所包含的成员(就像字符串也是不可变的， 程序无法修改字符串所包含的字符序列);
#               序列是可变的，程序可以修改序列所包含的元素 。

"""
创建列表和元组
"""

# 创建列表使用方括号
my_list = ['a', 'b', 'c']
# 创建元组使用圆括号
my_tuple = ('a', 'b', 'c')

"""
二、列表和元组的通用用法
"""

# 2.1、通过索引访问

# 列表和元组都可通过索引来访问元素，它们的索引都是从 0 开始的，第11个 元素的索引为0, 第 2 个元素的索引为1 依此类推 ;
# 它们也支持使用负数索引 ，倒数第 1个元素的索引为-1，倒 数第 2 个元素的索引为-2...... 依此类推 。
# 列表支持元素赋值，元祖不支持
print('\n===================通过索引访问===================\n')
my_list_1 = ['a', 23, 5.6, 'test']
print(my_list_1[0])
print(my_list_1[1])
print(my_list_1[2])
print(my_list_1[-1])
print(my_list_1[-2])

# 2.2、子序列

# 和字符串类似，列表和元组同样 也可使用索引获取中间一段 ，这种用法被 称为slice (分片或切片)。
# 语法：[start:end:step]
# start/end：元素开始的索引（包含）/元素结束的索引（不包含），均支持负数
# step：步长（角标index的差值）：负数没有意义。默认是1

my_tuple_1 = ('test', 20, 5.6, 'hello', -17)

print('\n===================子序列===================\n')

print(my_tuple_1[0:2])
print(my_tuple_1[2:-1])
print(my_tuple_1[0:4:2])

# 2.2、加法

# 列表和元组支持加法运算，力日法的和就是两个列表或元组所包含的元素的总和 。
# 需要指出的是，列表只能和列表相加;元组只能和元组相加;元组不能直接和列表相加。

print('\n===================加法===================\n')

my_list_add_1 = ['test', 20, 5.6, 'hello', -17]
my_list_add_2 = ['myt', 'hello']
my_list_add_result = my_list_add_1 + my_list_add_2

print(my_list_add_1)  # 元数据没有发生变化
print(my_list_add_2)  # 元数据没有发生变化
print(my_list_add_result)

print(my_list_1 + ['good boy'])

# print(my_list_1 + ('good boy'))  # 错误用法


# 2.3、乘法

# 列表和元组可以和整数执行乘法运算，列表和元组乘法的意义就是把它们包含的元素重复N次 - N 就是被乘的倍数。
print('\n===================乘法===================\n')

print(['a', 1, 'test', 100] * 3)

# eg：查找日期
order_endings = ('st', 'nd', 'rd') + ('th',) * 17 + ('st', 'nd', 'rd') + ('th',) * 7 + ('st',)
print(order_endings)
print(str(22) + order_endings[22])

# ('th',) 和('th') 的区别：为什么要加逗号？
# ('th')和'th'是相同的。只是字符串上加圆括号
# ('th',)才是元祖
# 注意：为了表示只有一个元素的元组，必须在唯一的元组元素之后添加英文逗号。

# 2.4、in运算符
# in 运算符用于判断列表或元组是否包含某个元素

print('\n===================in的用法===================\n')

print('a' in ('a', 12, 'test'))  # True
print('b' in ('a', 12, 'test'))  # False

# 2.5、长度、最大值和最小值

# py提供了内置的 len()、max()、min()全局函数来获取元组或列表的长度、最大值和最小值
# 由于 max()、 min()要对元组、列表中的元素比较大小，因此程序要求传给 max()、 min()函数的元组、列表的元素必须是【相同类型】且【可以比较大小】
print('\n===================长度、最大值和最小值的用法===================\n')
my_list_3 = [10086, 10, -200, 3, -20]
print(len(my_list_3))
print(max(my_list_3))
print(min(my_list_3))

my_list_4 = ['abc', 'def', 'bce', 'zde', 'hello']
# 计算最大值(依次比较每个字符的 ASCII 码值，先比较第一个字符，若相同，再比较第二个字符 以此类推）
print('最大值为：', max(my_list_4))
# 注意：Python 的字符串也是可比较大小的：Python 依次按字符串 中每个字符对应的编码来 比较字符串 的大小 。

# 2.6、序列封包和序列解包
# 程序把多个值赋给一个变量时， Python 会自动将多个值封装成元组。这种功能被称为序列封包。
print('\n===================序列封包和序列解包===================\n')

val_s = 10, 20, 30
print(val_s)  # (10, 20, 30)
print(type(val_s))  # <class 'tuple'>

# 程序允许将序列 (元组或列表等)直接赋值给多个变量，此时序列的各元素会被依次赋值给每个变量【要求序列的元素个数和变量个数相等】。这种功能被称为序列解包。
a, b, c, d = ('aa', 'bb', 'cc', 'dd')
print('a=', a, ',b=', b, ',c=', c, ',d=', d)

# eg：同时使用序列封包、序列解包、就可以让赋值运算符支持同时将多个值赋给多个变量。
# 其实下列的步骤为：
# ①temp = 10,20,30 -> ②temp = (10,20,30) -> ③x,y,z = (10,20,30) -> ④x=10,y=20,z=30
x, y, z = 10, 20, 30
print('x=', x, ',y=', y, ',z=', z)

# 这种语法也可以用于实现交换变量的值
x, y, z = y, z, x
print('x=', x, ',y=', y, ',z=', z)

